String[] mavenRepo = {
    "repo.gradle.org", "https://repo.gradle.org/gradle/libs-releases"
};
String[] mavenDependencies = {
    "org.gradle:gradle-tooling-api:7.4.2",
    "net.sourceforge.plantuml:plantuml:8059"
};
getKernelInstance().getMavenResolver().addMavenRepo(Arrays.asList(mavenRepo));
getKernelInstance().getMavenResolver().addMavenDependencies(Arrays.asList(mavenDependencies));

import io.github.spencerpark.jupyter.kernel.magic.registry.LineMagic;
import io.github.spencerpark.jupyter.kernel.magic.registry.CellMagic;
import org.gradle.tooling.ProjectConnection;
import org.gradle.tooling.BuildLauncher;
import org.gradle.tooling.GradleConnector;
import java.nio.charset.Charset;
import java.nio.file.Files;
import net.sourceforge.plantuml.SourceStringReader;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.FileFormat;
import java.io.ByteArrayOutputStream;

class CustomMagics {
    @CellMagic
    public void gradle(List<String> args, String body) throws Exception {
        String gradle_task = args.isEmpty() ? "RuntimeClasspath" : args.get(0);
        String randomDirectoryPath = System.getProperty("java.io.tmpdir") + File.separator + UUID.randomUUID().toString();
        String[] params= {randomDirectoryPath + File.separator + "build.gradle", gradle_task};
        File buildFile = new File(params[0]);
        buildFile.getParentFile().mkdirs();
        Files.write(buildFile.toPath(), body.getBytes(Charset.forName("utf-8")));
        gradle(Arrays.asList(params));
    }

    @LineMagic
    public void gradle(List<String> args) throws Exception { 
        if (args.isEmpty()) {
            throw new IllegalArgumentException("Loading from gradle requires at least the path to the gradle.build file");
        }
        
        File buildFile = new File(args.get(0));
        String gradle_task = args.size()>1 ? args.get(1) : "RuntimeClasspath";

        ProjectConnection connection = GradleConnector.newConnector()
                .forProjectDirectory(buildFile.getParentFile())
                .connect();
        String[] gradleTasks = new String[]{ gradle_task };
        BuildLauncher build = connection.newBuild();
        ByteArrayOutputStream standardOutput = new ByteArrayOutputStream();
        ByteArrayOutputStream errorOutput = new ByteArrayOutputStream();	        

        try {
            build.forTasks(gradleTasks)
                    .setStandardOutput(standardOutput)
                    .setStandardError(errorOutput)   
                    .setColorOutput(true)
                    .run();
        } catch (Exception e) { ; }

        if (errorOutput.toString().isEmpty()) {
            System.out.println(standardOutput);
            if (gradle_task.equals("RuntimeClasspath")) {
                List<String> classpath = Arrays.asList(standardOutput.toString().split("\n"));
                getKernelInstance().getMavenResolver().addJarsToClasspath(
                    classpath.stream()
                         .filter(x -> x.startsWith("RuntimeClasspath: ")) 
                         .map(x -> x.replace("RuntimeClasspath: ", ""))::iterator
                );            
            }  
        } else {
            System.out.println(errorOutput);
        }
    }
    
    @CellMagic(aliases = { "uml" })
    public void plantuml (List<String> args, String body) throws Exception {        
        SourceStringReader reader = new SourceStringReader(body);
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        String desc = reader.generateImage(outputStream, new FileFormatOption(FileFormat.SVG));
        outputStream.close();
        final String svg = new String(outputStream.toByteArray(), Charset.forName("UTF-8"));
        display(svg, "text/html");
    }

    @LineMagic
    public void html (List<String> args) throws Exception {  
        args.forEach(arg -> display(arg, "text/html"));
    }

    @CellMagic
    public void html (List<String> args, String body) throws Exception {        
        display(body, "text/html");
    }  
    
    @LineMagic(aliases = { "js" })
    public void javascript (List<String> args) throws Exception {  
        args.forEach(arg -> display("<script>"+arg+"</script>", "text/html"));
    }
    
    @CellMagic(aliases = { "js" })
    public void javascript (List<String> args, String body) throws Exception {    
        String type = args.isEmpty() ? "" : "type="+args.get(0);
        display("<script " + type + ">" + body + "</script>", "text/html");
    }
    
    @LineMagic
    public void css (List<String> args) throws Exception {  
        args.forEach(arg -> display("<style>"+arg+"</style>", "text/html"));
    }

    @CellMagic
    public void css (List<String> args, String body) throws Exception {        
        display("<style>"+body+"</style>", "text/html");
    }      
    
    @LineMagic(aliases = { "system", "bash" })
    public void exec(List<String> args) throws Exception {  
        ProcessBuilder pb = new ProcessBuilder();
        pb.command(args);
        pb.redirectErrorStream(true);
        Process process = pb.start();
        Scanner scanner = new Scanner(process.getInputStream(), Charset.forName("UTF-8"));
        while (scanner.hasNext()) {
            System.out.println(scanner.nextLine());
        }
    }
}
getKernelInstance().getMagics().registerMagics(new CustomMagics());