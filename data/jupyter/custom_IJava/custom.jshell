String[] mavenDependencies = {
    "net.sourceforge.plantuml:plantuml:8059"
};
getKernelInstance().getMavenResolver().addMavenDependencies(Arrays.asList(mavenDependencies));

import io.github.spencerpark.jupyter.kernel.magic.registry.LineMagic;
import io.github.spencerpark.jupyter.kernel.magic.registry.CellMagic;
import net.sourceforge.plantuml.SourceStringReader;
import net.sourceforge.plantuml.FileFormatOption;
import net.sourceforge.plantuml.FileFormat;
import java.io.ByteArrayOutputStream;
import java.nio.charset.Charset;

class CustomMagics {
    @CellMagic(aliases = { "uml" })
    public void plantuml (List<String> args, String body) throws Exception {        
        SourceStringReader reader = new SourceStringReader(body);
        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        String desc = reader.generateImage(outputStream, new FileFormatOption(FileFormat.SVG));
        outputStream.close();
        final String svg = new String(outputStream.toByteArray(), Charset.forName("UTF-8"));
        display(svg, "text/html");
    }

    @LineMagic
    public void html (List<String> args) throws Exception {  
        args.forEach(arg -> display(arg, "text/html"));
    }

    @CellMagic
    public void html (List<String> args, String body) throws Exception {        
        display(body, "text/html");
    }  
    
    @LineMagic(aliases = { "js" })
    public void javascript (List<String> args) throws Exception {  
        args.forEach(arg -> display("<script>"+arg+"</script>", "text/html"));
    }
    
    @CellMagic(aliases = { "js" })
    public void javascript (List<String> args, String body) throws Exception {    
        String type = args.isEmpty() ? "" : "type="+args.get(0);
        display("<script " + type + ">" + body + "</script>", "text/html");
    }
    
    @LineMagic
    public void css (List<String> args) throws Exception {  
        args.forEach(arg -> display("<style>"+arg+"</style>", "text/html"));
    }

    @CellMagic
    public void css (List<String> args, String body) throws Exception {        
        display("<style>"+body+"</style>", "text/html");
    }      
    
    @LineMagic(aliases = { "system", "bash" })
    public void exec(List<String> args) throws Exception {  
        ProcessBuilder pb = new ProcessBuilder();
        pb.command(args);
        pb.redirectErrorStream(true);
        Process process = pb.start();
        Scanner scanner = new Scanner(process.getInputStream(), Charset.forName("UTF-8"));
        while (scanner.hasNext()) {
            System.out.println(scanner.nextLine());
        }
    }
}
getKernelInstance().getMagics().registerMagics(new CustomMagics());